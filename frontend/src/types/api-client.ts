//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> },
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @return OK
   */
  health(): Promise<ProviderDto[]> {
    let url_ = this.baseUrl + "/api/Health/health";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "text/plain",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processHealth(_response);
    });
  }

  protected processHealth(response: Response): Promise<ProviderDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(ProviderDto.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<ProviderDto[]>(null as any);
  }

  /**
   * @param providerId (optional)
   * @return OK
   */
  movies(
    providerId: string | undefined,
    movieId: string,
  ): Promise<MovieDetailsDto> {
    let url_ = this.baseUrl + "/api/Movies/{movieId}?";
    if (movieId === undefined || movieId === null)
      throw new Error("The parameter 'movieId' must be defined.");
    url_ = url_.replace("{movieId}", encodeURIComponent("" + movieId));
    if (providerId === null)
      throw new Error("The parameter 'providerId' cannot be null.");
    else if (providerId !== undefined)
      url_ += "providerId=" + encodeURIComponent("" + providerId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "text/plain",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processMovies(_response);
    });
  }

  protected processMovies(response: Response): Promise<MovieDetailsDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = MovieDetailsDto.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<MovieDetailsDto>(null as any);
  }

  /**
   * @param forceRefresh (optional)
   * @param page (optional)
   * @param pageSize (optional)
   * @return OK
   */
  movies(
    providerId: string,
    forceRefresh: boolean | undefined,
    page: number | undefined,
    pageSize: number | undefined,
  ): Promise<ProviderDto> {
    let url_ = this.baseUrl + "/api/Providers/{providerId}/movies?";
    if (providerId === undefined || providerId === null)
      throw new Error("The parameter 'providerId' must be defined.");
    url_ = url_.replace("{providerId}", encodeURIComponent("" + providerId));
    if (forceRefresh === null)
      throw new Error("The parameter 'forceRefresh' cannot be null.");
    else if (forceRefresh !== undefined)
      url_ += "forceRefresh=" + encodeURIComponent("" + forceRefresh) + "&";
    if (page === null) throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "text/plain",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processMovies(_response);
    });
  }

  protected processMovies(response: Response): Promise<ProviderDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ProviderDto.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<ProviderDto>(null as any);
  }
}

export class MovieDetailsDto implements IMovieDetailsDto {
  id!: string;
  title!: string;
  year?: number | undefined;
  type?: string | undefined;
  poster!: string;
  rated?: string | undefined;
  released?: string | undefined;
  runtime?: string | undefined;
  genre?: string | undefined;
  director?: string | undefined;
  writer?: string | undefined;
  actors?: string | undefined;
  plot?: string | undefined;
  language?: string | undefined;
  country?: string | undefined;
  awards?: string | undefined;
  metascore?: number | undefined;
  rating?: number | undefined;
  votes?: string | undefined;
  price?: number | undefined;

  constructor(data?: IMovieDetailsDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.title = _data["title"];
      this.year = _data["year"];
      this.type = _data["type"];
      this.poster = _data["poster"];
      this.rated = _data["rated"];
      this.released = _data["released"];
      this.runtime = _data["runtime"];
      this.genre = _data["genre"];
      this.director = _data["director"];
      this.writer = _data["writer"];
      this.actors = _data["actors"];
      this.plot = _data["plot"];
      this.language = _data["language"];
      this.country = _data["country"];
      this.awards = _data["awards"];
      this.metascore = _data["metascore"];
      this.rating = _data["rating"];
      this.votes = _data["votes"];
      this.price = _data["price"];
    }
  }

  static fromJS(data: any): MovieDetailsDto {
    data = typeof data === "object" ? data : {};
    let result = new MovieDetailsDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["title"] = this.title;
    data["year"] = this.year;
    data["type"] = this.type;
    data["poster"] = this.poster;
    data["rated"] = this.rated;
    data["released"] = this.released;
    data["runtime"] = this.runtime;
    data["genre"] = this.genre;
    data["director"] = this.director;
    data["writer"] = this.writer;
    data["actors"] = this.actors;
    data["plot"] = this.plot;
    data["language"] = this.language;
    data["country"] = this.country;
    data["awards"] = this.awards;
    data["metascore"] = this.metascore;
    data["rating"] = this.rating;
    data["votes"] = this.votes;
    data["price"] = this.price;
    return data;
  }
}

export interface IMovieDetailsDto {
  id: string;
  title: string;
  year?: number | undefined;
  type?: string | undefined;
  poster: string;
  rated?: string | undefined;
  released?: string | undefined;
  runtime?: string | undefined;
  genre?: string | undefined;
  director?: string | undefined;
  writer?: string | undefined;
  actors?: string | undefined;
  plot?: string | undefined;
  language?: string | undefined;
  country?: string | undefined;
  awards?: string | undefined;
  metascore?: number | undefined;
  rating?: number | undefined;
  votes?: string | undefined;
  price?: number | undefined;
}

export class MovieSummaryDto implements IMovieSummaryDto {
  id!: string;
  title!: string;
  year?: number | undefined;
  type?: string | undefined;
  poster!: string;
  availableIn!: string[];
  price?: number | undefined;
  providerId!: string;

  constructor(data?: IMovieSummaryDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.availableIn = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.title = _data["title"];
      this.year = _data["year"];
      this.type = _data["type"];
      this.poster = _data["poster"];
      if (Array.isArray(_data["availableIn"])) {
        this.availableIn = [] as any;
        for (let item of _data["availableIn"]) this.availableIn!.push(item);
      }
      this.price = _data["price"];
      this.providerId = _data["providerId"];
    }
  }

  static fromJS(data: any): MovieSummaryDto {
    data = typeof data === "object" ? data : {};
    let result = new MovieSummaryDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["title"] = this.title;
    data["year"] = this.year;
    data["type"] = this.type;
    data["poster"] = this.poster;
    if (Array.isArray(this.availableIn)) {
      data["availableIn"] = [];
      for (let item of this.availableIn) data["availableIn"].push(item);
    }
    data["price"] = this.price;
    data["providerId"] = this.providerId;
    return data;
  }
}

export interface IMovieSummaryDto {
  id: string;
  title: string;
  year?: number | undefined;
  type?: string | undefined;
  poster: string;
  availableIn: string[];
  price?: number | undefined;
  providerId: string;
}

export class ProviderDto implements IProviderDto {
  providerId!: string | undefined;
  movieSummaries?: MovieSummaryDto[] | undefined;
  isHealthy?: boolean;

  constructor(data?: IProviderDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.providerId = _data["providerId"];
      if (Array.isArray(_data["movieSummaries"])) {
        this.movieSummaries = [] as any;
        for (let item of _data["movieSummaries"])
          this.movieSummaries!.push(MovieSummaryDto.fromJS(item));
      }
      this.isHealthy = _data["isHealthy"];
    }
  }

  static fromJS(data: any): ProviderDto {
    data = typeof data === "object" ? data : {};
    let result = new ProviderDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["providerId"] = this.providerId;
    if (Array.isArray(this.movieSummaries)) {
      data["movieSummaries"] = [];
      for (let item of this.movieSummaries)
        data["movieSummaries"].push(item ? item.toJSON() : <any>undefined);
    }
    data["isHealthy"] = this.isHealthy;
    return data;
  }
}

export interface IProviderDto {
  providerId: string | undefined;
  movieSummaries?: MovieSummaryDto[] | undefined;
  isHealthy?: boolean;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any,
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any,
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
